<?php
/**
 * WebTricks - PHP Framework
 *
 * LICENSE
 *
 * For the full copyright and license information, please view the 
 * following URL: http://www.webtricksframework.com/license 
 * 
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade to newer versions in
 * the future. If you wish to customize WebTricks for your needs please go to 
 * http://www.webtricksframework.com for more information.
 *
 * @copyright Copyright (c) 2007-2010 Cream (http://www.cream.nl)
 * @license   http://www.webtricksframework.com/license
 */

/**
 * A combobox control with support for autocomplete, remote-loading, paging and
 * many other features.
 * 
 * A ComboBox works in a similar manner to a traditional HTML <select> field. 
 * The difference is that to submit the valueField, you must specify a 
 * hiddenName to create a hidden input field to hold the value of the 
 * valueField. The displayField is shown in the text field which is named 
 * according to the name.
 * 
 * @package 	Cream_Web_UI_ExtControls_Form
 * @author 		Danny Verkade
 */
class Cream_Web_UI_ExtControls_Form_ComboBox extends Cream_Web_UI_ExtControls_Form_TriggerField 
{
	/**
	 * Create a new instance of this class
	 *
	 * @return Cream_Web_UI_ExtControls_Form_ComboBox
	 */
	public static function instance()
	{
		return Cream::instance(__CLASS__);
	}
	
	/**
	 * Initialize function
	 *
	 */
	public function __init()
	{
		$this->setControl('Ext.form.ComboBox');
		$this->setAttribute('xtype', 'combobox');
	}

	/**
	 * The id, DOM node or element of an existing HTML SELECT to convert to a ComboBox.
	 *
	 * @param mixed $transform
	 */
	public function setTransform($transform)
	{
		$this->setAttribute('transform', $transform);
	}

	/**
	 * True to prevent the ComboBox from rendering until requested (should always be used when
	 *
	 * @param boolean $lazyRender
	 */
	public function setLazyRender($lazyRender)
	{
		$this->setAttribute('lazyRender', $lazyRender);
	}

	/**
	 * A DomHelper element spec, or true for a default element spec. Used to 
	 * create the Element which will encapsulate this Component. See autoEl for
	 * details.
	 *
	 * @param boolean/object $autoCreate
	 */
	public function setAutoCreate($autoCreate)
	{
		$this->setAttribute('autoCreate', $autoCreate);
	}
	
	/**
	 * true to select the first result gathered by the data store (defaults to 
	 * true). A false value would require a manual selection from the dropdown 
	 * list to set the components value unless the value of (typeAheadDelay) 
	 * were true.
	 *
	 * @param boolean $autoSelect
	 */
	public function setAutoSelect($autoSelect)
	{
		$this->setAttribute('autoSelect', $autoSelect);
	}	
	
	/**
	 * True to clear any filters on the store (when in local mode) when reset 
	 * is called (defaults to true)
	 *
	 * @param boolean $clearFilterOnReset
	 */
	public function setClearFilterOnReset($clearFilterOnReset)
	{
		$this->setAttribute('clearFilterOnReset', $clearFilterOnReset);
	}	

	/**
	 * The data store to which this combo is bound (defaults to undefined)
	 *
	 * @param ext.data.store $store
	 */
	public function setStore($store)
	{
		$this->setAttribute('store', $store);
	}
	
	/**
	 * False to clear the name attribute on the field so that it is not 
	 * submitted during a form post. If a hiddenName is specified, setting this
	 * to true will cause both the hidden field and the element to be 
	 * submitted. Defaults to undefined.
	 *
	 * @param boolean $submitValue
	 */
	public function setSubmitValue($submitValue)
	{
		$this->setAttribute('submitValue', $submitValue);
	}	

	/**
	 * If supplied, a header element is created containing this text and added into the top of
	 *
	 * @param string $title
	 */
	public function setTitle($title)
	{
		$this->setAttribute('title', $title);
	}

	/**
	 * The width in pixels of the dropdown list (defaults to the width of the ComboBox field)
	 *
	 * @param number $listWidth
	 */
	public function setListWidth($listWidth)
	{
		$this->setAttribute('listWidth', $listWidth);
	}

	/**
	 * The underlying data field name to bind to this ComboBox (defaults to 
	 * undefined if mode = 'remote' or 'field1' if transforming a select or if
	 * the field name is autogenerated based on the store configuration). 
	 *
	 * @param string $displayField
	 */
	public function setDisplayField($displayField)
	{
		$this->setAttribute('displayField', $displayField);
	}

	/**
	 * The underlying data value name to bind to this ComboBox (defaults to undefined if
	 *
	 * @param string $valueField
	 */
	public function setValueField($valueField)
	{
		$this->setAttribute('valueField', $valueField);
	}

	/**
	 * If specified, a hidden form field with this name is dynamically generated to store the
	 *
	 * @param string $hiddenName
	 */
	public function setHiddenName($hiddenName)
	{
		$this->setAttribute('hiddenName', $hiddenName);
	}
	
	/**
	 * Sets the initial value of the hidden field if hiddenName is specified to
	 * contain the selected valueField, from the Store. Defaults to the 
	 * configured value.
	 *
	 * @param string $hiddenValue
	 */
	public function setHiddenValue($hiddenValue)
	{
		$this->setAttribute('hiddenValue', $hiddenValue);
	}	
	
	/**
	 * A simple CSS selector (e.g. div.some-class or span:first-child) that 
	 * will be used to determine what nodes the Ext.DataView which handles the
	 * dropdown display will be working with.
	 * 
	 * @param string $itemSelector
	 */
	public function setItemSelector($itemSelector)
	{
		$this->setAttribute('itemSelector', $itemSelector);
	}		

	/**
	 * If #hiddenName is specified, hiddenId can also be provided to give the hidden field
	 *
	 * @param string $hiddenId
	 */
	public function setHiddenId($hiddenId)
	{
		$this->setAttribute('hiddenId', $hiddenId);
	}

	/**
	 * CSS class to apply to the dropdown list element (defaults to '')
	 *
	 * @param string $listClass
	 */
	public function setListClass($listClass)
	{
		$this->setAttribute('listClass', $listClass);
	}
	
	/**
	 * The empty text to display in the data view if no items are found. 
	 * (defaults to '')
	 *
	 * @param string $listEmptyText
	 */
	public function setListEmptyText($listEmptyText)
	{
		$this->setAttribute('listEmptyText', $listEmptyText);
	}	

	/**
	 * CSS class to apply to the selected item in the dropdown list (defaults to 'x-combo-selected')
	 *
	 * @param string $selectedClass
	 */
	public function setSelectedClass($selectedClass)
	{
		$this->setAttribute('selectedClass', $selectedClass);
	}

	/**
	 * An additional CSS class used to style the trigger button.  The trigger will always get the
	 *
	 * @param string $triggerClass
	 */
	public function setTriggerClass($triggerClass)
	{
		$this->setAttribute('triggerClass', $triggerClass);
	}

	/**
	 * True or "sides" for the default effect, "frame" for 4-way shadow, and "drop" for bottom-right
	 *
	 * @param boolean/string $shadow
	 */
	public function setShadow($shadow)
	{
		$this->setAttribute('shadow', $shadow);
	}

	/**
	 * A valid anchor position value. See Ext.Element#alignTo for details on supported
	 *
	 * @param string $listAlign
	 */
	public function setListAlign($listAlign)
	{
		$this->setAttribute('listAlign', $listAlign);
	}

	/**
	 * The maximum height in pixels of the dropdown list before scrollbars are shown (defaults to 300)
	 *
	 * @param number $maxHeight
	 */
	public function setMaxHeight($maxHeight)
	{
		$this->setAttribute('maxHeight', $maxHeight);
	}

	/**
	 * The action to execute when the trigger field is activated.  Use 'all' to run the
	 *
	 * @param string $triggerAction
	 */
	public function setTriggerAction($triggerAction)
	{
		$this->setAttribute('triggerAction', $triggerAction);
	}

	/**
	 * The minimum number of characters the user must type before autocomplete and typeahead activate
	 *
	 * @param number $minChars
	 */
	public function setMinChars($minChars)
	{
		$this->setAttribute('minChars', $minChars);
	}

	/**
	 * True to populate and autoselect the remainder of the text being typed after a configurable
	 *
	 * @param boolean $typeAhead
	 */
	public function setTypeAhead($typeAhead)
	{
		$this->setAttribute('typeAhead', $typeAhead);
	}

	/**
	 * The length of time in milliseconds to delay between the start of typing and sending the
	 *
	 * @param number $queryDelay
	 */
	public function setQueryDelay($queryDelay)
	{
		$this->setAttribute('queryDelay', $queryDelay);
	}

	/**
	 * If greater than 0, a paging toolbar is displayed in the footer of the dropdown list and the
	 *
	 * @param number $pageSize
	 */
	public function setPageSize($pageSize)
	{
		$this->setAttribute('pageSize', $pageSize);
	}

	/**
	 * True to select any existing text in the field immediately on focus.  Only applies
	 *
	 * @param boolean $selectOnFocus
	 */
	public function setSelectOnFocus($selectOnFocus)
	{
		$this->setAttribute('selectOnFocus', $selectOnFocus);
	}

	/**
	 * Name of the query as it will be passed on the querystring (defaults to 'query')
	 *
	 * @param string $queryParam
	 */
	public function setQueryParam($queryParam)
	{
		$this->setAttribute('queryParam', $queryParam);
	}

	/**
	 * The text to display in the dropdown list while data is loading.  Only applies
	 *
	 * @param string $loadingText
	 */
	public function setLoadingText($loadingText)
	{
		$this->setAttribute('loadingText', $loadingText);
	}

	/**
	 * True to add a resize handle to the bottom of the dropdown list (defaults to false)
	 *
	 * @param boolean $resizable
	 */
	public function setResizable($resizable)
	{
		$this->setAttribute('resizable', $resizable);
	}

	/**
	 * The height in pixels of the dropdown list resize handle if resizable = 
	 * true (defaults to 8)
	 *
	 * @param number $handleHeight
	 */
	public function setHandleHeight($handleHeight)
	{
		$this->setAttribute('handleHeight', $handleHeight);
	}

	/**
	 * The text query to send to the server to return all records for the list with no filtering (defaults to '')
	 *
	 * @param string $allQuery
	 */
	public function setAllQuery($allQuery)
	{
		$this->setAttribute('allQuery', $allQuery);
	}

	/**
	 * Set to 'local' if the ComboBox loads local data (defaults to 'remote' which loads from the server)
	 *
	 * @param string $mode
	 */
	public function setMode($mode)
	{
		$this->setAttribute('mode', $mode);
	}

	/**
	 * The minimum width of the dropdown list in pixels (defaults to 70, will be ignored if
	 *
	 * @param number $minListWidth
	 */
	public function setMinListWidth($minListWidth)
	{
		$this->setAttribute('minListWidth', $minListWidth);
	}

	/**
	 * True to restrict the selected value to one of the values in the list, false to
	 *
	 * @param boolean $forceSelection
	 */
	public function setForceSelection($forceSelection)
	{
		$this->setAttribute('forceSelection', $forceSelection);
	}

	/**
	 * The length of time in milliseconds to wait until the typeahead text is displayed
	 *
	 * @param number $typeAheadDelay
	 */
	public function setTypeAheadDelay($typeAheadDelay)
	{
		$this->setAttribute('typeAheadDelay', $typeAheadDelay);
	}

	/**
	 * When using a name/value combo, if the value passed to setValue is not found in
	 *
	 * @param string $valueNotFoundText
	 */
	public function setValueNotFoundText($valueNotFoundText)
	{
		$this->setAttribute('valueNotFoundText', $valueNotFoundText);
	}

	/**
	 * True to not initialize the list for this combo until the field is 
	 * focused. (defaults to true)
	 *
	 * @param boolean $lazyInit
	 */
	public function setLazyInit($lazyInit)
	{
		$this->setAttribute('lazyInit', $lazyInit);
	}

	/**
	 * The template string, or Ext.XTemplate
	 *
	 * @param string/ext.xtemplate $tpl
	 */
	public function setTpl($tpl)
	{
		$this->setAttribute('tpl', $tpl);
	}
}