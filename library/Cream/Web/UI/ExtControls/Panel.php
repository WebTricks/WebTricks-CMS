<?php
/**
 * WebTricks - PHP Framework
 *
 * LICENSE
 *
 * For the full copyright and license information, please view the 
 * following URL: http://www.webtricksframework.com/license 
 * 
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade to newer versions in
 * the future. If you wish to customize WebTricks for your needs please go to 
 * http://www.webtricksframework.com for more information.
 *
 * @copyright Copyright (c) 2007-2010 Cream (http://www.cream.nl)
 * @license   http://www.webtricksframework.com/license
 */

/**
 * Panel is a container that has specific functionality and structural
 * components that make it the perfect building block for application-
 * oriented user interfaces.
 * 
 * Panels are, by virtue of their inheritance from Ext.Container, 
 * capable of being configured with a layout, and containing child 
 * Components.
 * 
 * When either specifying child items of a Panel, or dynamically adding 
 * Components to a Panel, remember to consider how you wish the Panel to 
 * arrange those child elements, and whether those child elements need 
 * to be sized using one of Ext's built-in layout schemes. By default, 
 * Panels use the ContainerLayout scheme. This simply renders child 
 * components, appending them one after the other inside the Container, 
 * and does not apply any sizing at all.
 * 
 * A Panel may also contain bottom and top toolbars, along with separate 
 * header, footer and body sections (see frame for additional information).
 * 
 * Panel also provides built-in expandable and collapsible behavior, 
 * along with a variety of prebuilt tool buttons that can be wired up 
 * to provide other customized behavior. Panels can be easily dropped 
 * into any Container or layout, and the layout and rendering pipeline 
 * is completely managed by the framework.
 * 
 * @package 	Cream_Web_UI_ExtControls
 * @author 		Danny Verkade
 */
class Cream_Web_UI_ExtControls_Panel extends Cream_Web_UI_ExtControls_Container
{
	/**
	 * Create a new instance of this class
	 *
	 * @return Cream_Web_UI_ExtControls_Panel
	 */
	public static function instance()
	{
		return Cream::instance(__CLASS__);
	}	
	
	/**
	 * Initialize function
	 *
	 */
	public function __init()
	{
		$this->setControl('Ext.Panel');
		$this->setXtype('panel');
	}

	/**
	 * The id of the node, a DOM node or an existing Element corresponding to a 
	 * DIV that is already present in the document that specifies some 
	 * panel-specific structural markup. When applyTo is used, constituent 
	 * parts of the panel can be specified by CSS class name within the main 
	 * element, and the panel will automatically create those components from 
	 * that markup. Any required components not specified in the markup will be
	 * autogenerated if necessary.
	 *
	 * @param mixed $applyTo
	 */
	public function setApplyTo($applyTo) 
	{
		$this->setAttribute('applyTo', $applyTo);
	}
	
	/**
	 * A shortcut for setting a padding style on the body element. The value can 
	 * either be a number to be applied to all sides, or a normal css string 
	 * describing padding. Defaults to undefined.
	 *
	 * @param number|string $padding
	 */
	public function setPadding($padding) 
	{
		$this->setAttribute('padding', $padding);
	}

	/**
	 * Defaults to false. When set to true, an extra css class 'x-panel-normal' 
	 * will be added to the panel's element, effectively applying css styles 
	 * suggested by the W3C (see http://www.w3.org/TR/CSS21/sample.html) to the 
	 * Panel's body element (not the header, footer, etc.).
	 *
	 * @param boolean $preventBodyReset
	 */
	public function setPreventBodyReset($preventBodyReset) 
	{
		$this->setAttribute('preventBodyReset', $preventBodyReset);
	}	
	
	/**
	 * The top toolbar of the panel. This can be a Ext.Toolbar object, a 
	 * toolbar config, or an array of buttons/button configs to be added to the 
	 * toolbar. Note that this is not available as a property after render. To 
	 * access the top toolbar after render, use getTopToolbar.
	 * 
	 * Note: Although a Toolbar may contain Field components, these will not be 
	 * updated by a load of an ancestor FormPanel. A Panel's toolbars are not 
	 * part of the standard Container->Component hierarchy, and so are not 
	 * scanned to collect form items. However, the values will be submitted 
	 * because form submission parameters are collected from the DOM tree.
	 *
	 * @param object/array $tbar
	 */
	public function setTbar($tbar) 
	{
		$this->setAttribute('tbar', $tbar);
	}
	
	/**
	 * A DomHelper element specification object specifying the element 
	 * structure of this Panel's tbar Element. See bodyCfg also.
	 *
	 * @param object $tbarCfg
	 */
	public function setTbarCfg($tbarCfg) 
	{
		$this->setAttribute('tbarCfg', $tbarCfg);
	}	

	/**
	 * The bottom toolbar of the panel. This can be a Ext.Toolbar object, a 
	 * toolbar config, or an array of buttons/button configs to be added to the
	 * toolbar. Note that this is not available as a property after render. To 
	 * access the bottom toolbar after render, use getBottomToolbar.
	 *
	 * @param Cream_Web_UI_ExtControls_Toolbar $bbar
	 */
	public function setBbar($bbar) 
	{
		$this->setAttribute('bbar', $bbar);
	}
	
	/**
	 * A DomHelper element specification object specifying the element 
	 * structure of this Panel's bbar Element. See bodyCfg also.
	 *
	 * @param object $bbarCfg
	 */
	public function setBbarCfg($bbarCfg) 
	{
		$this->setAttribute('bbarCfg', $bbarCfg);
	}	

	/**
	 * True to create the Panel's header element explicitly, false to skip 
	 * creating it. If a title is set the header will be created automatically, 
	 * otherwise it will not. If a title is set but header is explicitly set to 
	 * false, the header will not be rendered.
	 *
	 * @param boolean $header
	 */
	public function setHeader($header) 
	{
		$this->setAttribute('header', $header);
	}

	/**
	 * True to create the footer element explicitly, false to skip creating it. 
	 * The footer will be created automatically if buttons or a fbar have been 
	 * configured. See bodyCfg for an example.
	 *
	 * @param boolean $footer
	 */
	public function setFooter($footer) 
	{
		$this->setAttribute('footer', $footer);
	}
	
	/**
	 * A DomHelper element specification object specifying the element 
	 * structure of this Panel's footer Element. See bodyCfg also.
	 *
	 * @param object $footerCfg
	 */
	public function setFooterCfg($footerCfg) 
	{
		$this->setAttribute('footerCfg', $footerCfg);
	}	

	/**
	 * The title text to be used as innerHTML (html tags are accepted) to 
	 * display in the panel header (defaults to ''). When a title is specified
	 * the header element will automatically be created and displayed unless 
	 * header is explicitly set to false. If you do not want to specify a title 
	 * at config time, but you may want one later, you must either specify a 
	 * non-empty title (a blank space ' ' will do) or header:true so that the 
	 * container element will get created.
	 *
	 * @param string $title
	 */
	public function setTitle($title) 
	{
		$this->setAttribute('title', $title);
	}

	/**
	 * buttons will be used as items for the toolbar in the footer (fbar). 
	 * Typically the value of this configuration property will be an array of 
	 * Ext.Buttons or Ext.Button configuration objects. If an item is 
	 * configured with minWidth or the Panel is configured with minButtonWidth,
	 * that width will be applied to the item.
	 *
	 * @param array $buttons
	 */
	public function setButtons($buttons) 
	{
		$this->setAttribute('buttons', $buttons);
	}

	/**
	 * A valid url spec according to the Updater Ext.Updater.update method. If 
	 * autoLoad is not null, the panel will attempt to load its contents 
	 * immediately upon render.
	 *
	 * @param object/string/function $autoLoad
	 */
	public function setAutoLoad($autoLoad) 
	{
		$this->setAttribute('autoLoad', $autoLoad);
	}

	/**
	 * False by default to render with plain 1px square borders. true to render 
	 * with 9 elements, complete with custom rounded corners (also see 
	 * Ext.Element.boxWrap). 
	 *
	 * @param boolean $frame
	 */
	public function setFrame($frame) 
	{
		$this->setAttribute('frame', $frame);
	}

	/**
	 * True to display the borders of the panel's body element, false to hide 
	 * them (defaults to true). By default, the border is a 2px wide inset 
	 * border, but this can be further altered by setting bodyBorder to false.
	 *
	 * @param boolean $border
	 */
	public function setBorder($border) 
	{
		$this->setAttribute('border', $border);
	}

	/**
	 * True to display an interior border on the body element of the panel, 
	 * false to hide it (defaults to true). This only applies when border == 
	 * true. If border == true and bodyBorder == false, the border will 
	 * display as a 1px wide inset border, giving the entire body element an 
	 * inset appearance.
	 *
	 * @param boolean $bodyBorder
	 */
	public function setBodyBorder($bodyBorder) 
	{
		$this->setAttribute('bodyBorder', $bodyBorder);
	}
	
	/**
	 * A DomHelper element specification object may be specified for any Panel
	 * Element.
	 *
	 * @param object $bodyCfg
	 */
	public function setBodyCfg($bodyCfg) 
	{
		$this->setAttribute('bodyCfg', $bodyCfg);
	}

	/**
	 * Additional css class selector to be applied to the body element in the 
	 * format expected by Ext.Element.addClass (defaults to null). See bodyCfg.  
	 *
	 * @param string $bodyCssClass
	 */
	public function setBodyCssClass($bodyCssClass) 
	{
		$this->setAttribute('bodyCssClass', $bodyCssClass);
	}	

	/**
	 * Custom CSS styles to be applied to the body element in the format 
	 * expected by Ext.Element.applyStyles (defaults to null). See bodyCfg.
	 *
	 * @param string/object/function $bodyStyle
	 */
	public function setBodyStyle($bodyStyle) 
	{
		$this->setAttribute('bodyStyle', $bodyStyle);
	}

	/**
	 * The CSS class selector that specifies a background image to be used as 
	 * the header icon (defaults to ''). 
	 *
	 * @param string $iconCls
	 */
	public function setIconCls($iconCls) 
	{
		$this->setAttribute('iconCls', $iconCls);
	}

	/**
	 * True to make the panel collapsible and have the expand/collapse toggle 
	 * button automatically rendered into the header tool button area, false 
	 * to keep the panel statically sized with no button (defaults to false).
	 *
	 * @param boolean $collapsible
	 */
	public function setCollapsible($collapsible) 
	{
		$this->setAttribute('collapsible', $collapsible);
	}
	
	/**
	 * A Template used to create tools in the header Element.
	 *
	 * @param Template|XTemplate $toolTemplate
	 */
	public function setToolTemplate($toolTemplate) 
	{
		$this->setAttribute('toolTemplate', $toolTemplate);
	}	

	/**
	 * An array of tool button configs to be added to the header tool area. 
	 * When rendered, each tool is stored as an Element referenced by a public
	 * property called tools.
	 *
	 * @param array $tools
	 */
	public function setTools($tools) 
	{
		$this->setAttribute('tools', $tools);
	}
	
	/**
	 * Overrides the baseCls setting to baseCls = 'x-plain' which renders the 
	 * panel unstyled except for required attributes for Ext layouts to 
	 * function (e.g. overflow:hidden).
	 *
	 * @param boolean $unstyled
	 */
	public function setUnstyled($unstyled) 
	{
		$this->setAttribute('unstyled', $unstyled);
	}	

	/**
	 * true to hide the expand/collapse toggle button when collapsible == true,
	 * false to display it (defaults to false).
	 *
	 * @param boolean $hideCollapseTool
	 */
	public function setHideCollapseTool($hideCollapseTool) 
	{
		$this->setAttribute('hideCollapseTool', $hideCollapseTool);
	}

	/**
	 * true to allow expanding and collapsing the panel (when collapsible = 
	 * true) by clicking anywhere in the header bar, false) to allow it only by 
	 * clicking to tool button (defaults to false)). If this panel is a child 
	 * item of a border layout also see the BorderLayout.Region floatable 
	 * config option.
	 *
	 * @param boolean $titleCollapse
	 */
	public function setTitleCollapse($titleCollapse) 
	{
		$this->setAttribute('titleCollapse', $titleCollapse);
	}
	
	/**
	 * A Toolbar object, a Toolbar config, or an array of Buttons/Button 
	 * configs, describing a Toolbar to be rendered into this Panel's footer 
	 * element.
	 * 
	 * After render, the fbar property will be an Toolbar instance.
	 * 
	 * @param object|array $fbar
	 */
	public function setFbar($fbar) 
	{
		$this->setAttribute('fbar', $fbar);
	}	
	
	/**
	 * This property is used to configure the underlying Ext.Layer. 
	 *
	 * @param boolean $floating
	 */
	public function setFloating($floating) 
	{
		$this->setAttribute('floating', $floating);
	}

	/**
	 * true (or a valid Ext.Shadow Ext.Shadow.mode value) to display a shadow 
	 * behind the panel, false to display no shadow (defaults to 'sides'). Note 
	 * that this option only applies when floating = true.
	 *
	 * @param boolean/string $shadow
	 */
	public function setShadow($shadow) 
	{
		$this->setAttribute('shadow', $shadow);
	}

	/**
	 * The number of pixels to offset the shadow if displayed (defaults to 4). 
	 * Note that this option only applies when floating = true.
	 *
	 * @param integer $shadowOffset
	 */
	public function setShadowOffset($shadowOffset) 
	{
		$this->setAttribute('shadowOffset', $shadowOffset);
	}

	/**
	 * false to disable the iframe shim in browsers which need one (defaults to
	 * true). Note that this option only applies when floating = true.
	 *
	 * @param boolean $shim
	 */
	public function setShim($shim) {
		$this->setAttribute('shim', $shim);
	}

	/**
	 * A Ext.KeyMap config object (in the format expected by 
	 * Ext.KeyMap.addBinding used to assign custom key handling to this panel
	 * (defaults to null).
	 *
	 * @param object/array $keys
	 */
	public function setKeys($keys) 
	{
		$this->setAttribute('keys', $keys);
	}

	/**
	 * True to enable dragging of this Panel (defaults to false).
	 *
	 * @param boolean $draggable
	 */
	public function setDraggable($draggable) 
	{
		$this->setAttribute('draggable', $draggable);
	}

	/**
	 * The base CSS class to apply to this panel's element (defaults to 
	 * 'x-panel').
	 * 
	 * Another option available by default is to specify 'x-plain' which strips
	 * all styling except for required attributes for Ext layouts to function 
	 * (e.g. overflow:hidden). See unstyled also.
	 *
	 * @param string $baseCls
	 */
	public function setBaseCls($baseCls) 
	{
		$this->setAttribute('baseCls', $baseCls);
	}

	/**
	 * A CSS class to add to the panel's element after it has been collapsed 
	 * (defaults to 'x-panel-collapsed').
	 *
	 * @param string $collapsedCls
	 */
	public function setCollapsedCls($collapsedCls) 
	{
		$this->setAttribute('collapsedCls', $collapsedCls);
	}

	/**
	 * True to mask the panel when it is disabled, false to not mask it 
	 * (defaults to true). Either way, the panel will always tell its contained
	 * elements to disable themselves when it is disabled, but masking the 
	 * panel can provide an additional visual cue that the panel is disabled.
	 *
	 * @param boolean $maskDisabled
	 */
	public function setMaskDisabled($maskDisabled) 
	{
		$this->setAttribute('maskDisabled', $maskDisabled);
	}

	/**
	 * True to animate the transition when the panel is collapsed, false to 
	 * skip the animation (defaults to true if the Ext.Fx class is available, 
	 * otherwise false).
	 *
	 * @param boolean $animCollapse
	 */
	public function setAnimCollapse($animCollapse) 
	{
		$this->setAttribute('animCollapse', $animCollapse);
	}

	/**
	 * true to display the panel title in the header, false to hide it 
	 * (defaults to true).
	 *
	 * @param boolean $headerAsText
	 */
	public function setHeaderAsText($headerAsText) 
	{
		$this->setAttribute('headerAsText', $headerAsText);
	}
	
	/**
	 * A DomHelper element specification object specifying the element 
	 * structure of this Panel's header Element. See bodyCfg also.
	 *
	 * @param object $headerCfg
	 */
	public function setHeaderCfg($headerCfg) 
	{
		$this->setAttribute('headerCfg', $headerCfg);
	}	

	/**
	 * The alignment of any buttons added to this panel. Valid values are 
	 * 'right', 'left' and 'center' (defaults to 'right').
	 *
	 * @param string $buttonAlign
	 */
	public function setButtonAlign($buttonAlign) 
	{
		$this->setAttribute('buttonAlign', $buttonAlign);
	}

	/**
	 * true to render the panel collapsed, false to render it expanded 
	 * (defaults to false).
	 *
	 * @param boolean $collapsed
	 */
	public function setCollapsed($collapsed) 
	{
		$this->setAttribute('collapsed', $collapsed);
	}

	/**
	 * true to make sure the collapse/expand toggle button always renders first
	 * (to the left of) any other tools in the panel's title bar, false to 
	 * render it last (defaults to true).
	 *
	 * @param boolean $collapseFirst
	 */
	public function setCollapseFirst($collapseFirst) 
	{
		$this->setAttribute('collapseFirst', $collapseFirst);
	}

	/**
	 * Minimum width in pixels of all buttons in this panel (defaults to 75)
	 *
	 * @param number $minButtonWidth
	 */
	public function setMinButtonWidth($minButtonWidth) 
	{
		$this->setAttribute('minButtonWidth', $minButtonWidth);
	}

	/**
	 * A comma-delimited list of panel elements to initialize when the panel is 
	 * rendered. Normally, this list will be generated automatically based on 
	 * the items added to the panel at config time, but sometimes it might be 
	 * useful to make sure a structural element is rendered even if not 
	 * specified at config time (for example, you may want to add a button or 
	 * toolbar dynamically after the panel has been rendered). Adding those 
	 * elements to this list will allocate the required placeholders in the 
	 * panel when it is rendered.
	 *
	 * @param string $elements
	 */
	public function setElements($elements) 
	{
		$this->setAttribute('elements', $elements);
	}

	/**
	 * Panels themselves do not directly support being closed, but some Panel 
	 * subclasses do (like Ext.Window) or a Panel Class within an Ext.TabPanel. 
	 * Specify true to enable closing in such situations. Defaults to false.
	 *
	 * @param boolean $closable
	 */
	public function setClosable($closable)
	{
		$this->setAttribute('closable', $closable);
	}
}